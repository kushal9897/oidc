name: "Vault CI/CD Pipeline"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - 'evviroments/**'
      - 'modules/**'

env:
  TF_VERSION: "1.6.6"
  VAULT_ADDR: ${{ secrets.VAULT_ADDR }}

jobs:
  detect-changes:
    name: "Detect Changes"
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.changes.outputs.environments }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect environment changes
        id: changes
        run: |
          # Get list of changed environment directories
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            changed_files=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          else
            changed_files=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          # Extract unique environment names from changed paths
          environments=$(echo "$changed_files" | grep "^evviroments/" | cut -d'/' -f2 | sort -u | jq -R -s -c 'split("\n")[:-1]')
          
          echo "Changed environments: $environments"
          echo "environments=$environments" >> $GITHUB_OUTPUT

  terraform-deploy:
    name: "Deploy Environment"
    needs: detect-changes
    if: needs.detect-changes.outputs.environments != '[]'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        environment: ${{ fromJson(needs.detect-changes.outputs.environments) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Get Vault Token via OIDC
        id: vault-auth
        run: |
          # Get JWT token from GitHub
          JWT_TOKEN=$(curl -sLS "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=vault" \
            -H "User-Agent: actions/oidc-client" \
            -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN")
          
          # Determine Vault role based on environment
          if [ "${{ matrix.environment }}" = "data" ]; then
            VAULT_ROLE="github-actions-data"
            AWS_ROLE="data-deploy-role"
          else
            VAULT_ROLE="github-actions"
            AWS_ROLE="deploy-role"
          fi
          
          # Login to Vault using JWT
          VAULT_TOKEN=$(curl -s \
            --request POST \
            --data "{\"role\":\"$VAULT_ROLE\",\"jwt\":\"$JWT_TOKEN\"}" \
            $VAULT_ADDR/v1/auth/jwt/login | jq -r '.auth.client_token')
          
          echo "VAULT_TOKEN=$VAULT_TOKEN" >> $GITHUB_ENV
          echo "AWS_ROLE=$AWS_ROLE" >> $GITHUB_ENV

      - name: Get AWS credentials from Vault
        run: |
          # Get AWS credentials from Vault
          AWS_CREDS=$(curl -s \
            -H "X-Vault-Token: $VAULT_TOKEN" \
            $VAULT_ADDR/v1/aws/creds/$AWS_ROLE)
          
          AWS_ACCESS_KEY_ID=$(echo $AWS_CREDS | jq -r '.data.access_key')
          AWS_SECRET_ACCESS_KEY=$(echo $AWS_CREDS | jq -r '.data.secret_key')
          
          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV

      - name: Terraform Init
        working-directory: evviroments/${{ matrix.environment }}
        run: terraform init

      - name: Terraform Validate
        working-directory: evviroments/${{ matrix.environment }}
        run: terraform validate

      - name: Terraform Plan
        working-directory: evviroments/${{ matrix.environment }}
        run: terraform plan -out=tfplan -no-color 2>&1 | tee plan_output.txt

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        working-directory: evviroments/${{ matrix.environment }}
        run: terraform apply -auto-approve