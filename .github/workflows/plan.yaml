name: Terraform Plan and Apply

on:
  push:
    branches:
      - main
      - 'feature/**'
      - 'fix/**'
  pull_request:
    branches:
      - main

env:
  VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
  TF_VERSION: "1.6.6"

jobs:
  detect-changes:
    name: Detect Changed Environments
    runs-on: ubuntu-latest
    outputs:
      qa_changed: ${{ steps.changes.outputs.qa }}
      backend_changed: ${{ steps.changes.outputs.backend }}
      modules_changed: ${{ steps.changes.outputs.modules }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        id: changes
        run: |
          # Function to check if files changed
          check_changes() {
            local path=$1
            if [ "${{ github.event_name }}" == "pull_request" ]; then
              git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -q "^$path" && echo "true" || echo "false"
            else
              git diff --name-only HEAD~1...HEAD | grep -q "^$path" && echo "true" || echo "false"
            fi
          }
          
          # Check each environment and modules
          echo "qa=$(check_changes 'envs/qa/')" >> $GITHUB_OUTPUT
          echo "backend=$(check_changes 'envs/backend/')" >> $GITHUB_OUTPUT
          echo "modules=$(check_changes 'modules/')" >> $GITHUB_OUTPUT
          
          # Debug output
          echo "QA changed: $(check_changes 'envs/qa/')"
          echo "Backend changed: $(check_changes 'envs/backend/')"
          echo "Modules changed: $(check_changes 'modules/')"

  terraform-qa:
    name: Terraform QA Environment
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.qa_changed == 'true' || needs.detect-changes.outputs.modules_changed == 'true'
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    env:
      ENVIRONMENT: qa
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials via Vault
        id: aws-creds
        run: |
          # Get JWT token from GitHub OIDC
          GITHUB_TOKEN=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=vault" | jq -r '.value')
          
          # Authenticate to Vault using JWT
          VAULT_TOKEN=$(curl -X POST \
            -H "Content-Type: application/json" \
            -d "{\"jwt\": \"$GITHUB_TOKEN\", \"role\": \"github-actions\"}" \
            ${{ env.VAULT_ADDR }}/v1/auth/jwt/login | jq -r '.auth.client_token')
          
          # Get AWS credentials from Vault
          AWS_CREDS=$(curl -H "X-Vault-Token: $VAULT_TOKEN" \
            -X GET ${{ env.VAULT_ADDR }}/v1/aws/creds/deploy-role)
          
          # Export AWS credentials
          echo "AWS_ACCESS_KEY_ID=$(echo $AWS_CREDS | jq -r '.data.access_key')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $AWS_CREDS | jq -r '.data.secret_key')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $AWS_CREDS | jq -r '.data.security_token')" >> $GITHUB_ENV
          echo "::add-mask::$(echo $AWS_CREDS | jq -r '.data.access_key')"
          echo "::add-mask::$(echo $AWS_CREDS | jq -r '.data.secret_key')"
          echo "::add-mask::$(echo $AWS_CREDS | jq -r '.data.security_token')"

      - name: Terraform Init
        working-directory: ./envs/qa
        run: terraform init

      - name: Terraform Format Check
        working-directory: ./envs/qa
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: ./envs/qa
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ./envs/qa
        run: |
          terraform plan -out=tfplan -no-color 2>&1 | tee plan_output.txt
          echo "exitcode=$?" >> $GITHUB_OUTPUT

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const planOutput = fs.readFileSync('./envs/qa/plan_output.txt', 'utf8');
            const output = `#### Terraform QA Environment Plan ðŸ“‹
            \`\`\`terraform
            ${planOutput.substring(0, 65000)}
            \`\`\`
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: ./envs/qa
        run: terraform apply -auto-approve

  terraform-backend:
    name: Terraform Backend Environment
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend_changed == 'true' || needs.detect-changes.outputs.modules_changed == 'true'
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    env:
      ENVIRONMENT: backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials via Vault
        id: aws-creds
        run: |
          # Get JWT token from GitHub OIDC
          GITHUB_TOKEN=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=vault" | jq -r '.value')
          
          # Authenticate to Vault using JWT
          VAULT_TOKEN=$(curl -X POST \
            -H "Content-Type: application/json" \
            -d "{\"jwt\": \"$GITHUB_TOKEN\", \"role\": \"github-actions\"}" \
            ${{ env.VAULT_ADDR }}/v1/auth/jwt/login | jq -r '.auth.client_token')
          
          # Get AWS credentials from Vault
          AWS_CREDS=$(curl -H "X-Vault-Token: $VAULT_TOKEN" \
            -X GET ${{ env.VAULT_ADDR }}/v1/aws/creds/deploy-role)
          
          # Export AWS credentials
          echo "AWS_ACCESS_KEY_ID=$(echo $AWS_CREDS | jq -r '.data.access_key')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $AWS_CREDS | jq -r '.data.secret_key')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $AWS_CREDS | jq -r '.data.security_token')" >> $GITHUB_ENV
          echo "::add-mask::$(echo $AWS_CREDS | jq -r '.data.access_key')"
          echo "::add-mask::$(echo $AWS_CREDS | jq -r '.data.secret_key')"
          echo "::add-mask::$(echo $AWS_CREDS | jq -r '.data.security_token')"

      - name: Terraform Init
        working-directory: ./envs/backend
        run: terraform init

      - name: Terraform Format Check
        working-directory: ./envs/backend
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: ./envs/backend
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ./envs/backend
        run: |
          terraform plan -out=tfplan -no-color 2>&1 | tee plan_output.txt
          echo "exitcode=$?" >> $GITHUB_OUTPUT

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const planOutput = fs.readFileSync('./envs/backend/plan_output.txt', 'utf8');
            const output = `#### Terraform Backend Environment Plan ðŸ“‹
            \`\`\`terraform
            ${planOutput.substring(0, 65000)}
            \`\`\`
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: ./envs/backend
        run: terraform apply -auto-approve