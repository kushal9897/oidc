name: Deploy Infrastructure

on:
  push:
    branches: [ main ]
    paths:
      - 'namespaces/**'
      - 'modules/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'namespaces/**'
      - 'modules/**'

env:
  VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
  TF_VERSION: "1.6.0"

jobs:
  detect-changes:
    name: Detect Changed Namespaces
    runs-on: ubuntu-latest
    outputs:
      namespaces: ${{ steps.detect.outputs.namespaces }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed namespaces
        id: detect
        shell: bash
        run: |
          set -euo pipefail

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE="origin/${{ github.base_ref }}"
            HEAD="HEAD"
            CHANGED_FILES="$(git diff --name-only "${BASE}...${HEAD}")"
          else
            CHANGED_FILES="$(git diff --name-only HEAD~1...HEAD)"
          fi

          # If modules changed, include all namespaces
          if echo "${CHANGED_FILES}" | grep -q '^modules/'; then
            mapfile -t ALL_NS < <(find namespaces -mindepth 1 -maxdepth 1 -type d -printf "%f\n" | sort -u)
            if ((${#ALL_NS[@]}==0)); then
              echo "namespaces=[]" >> "$GITHUB_OUTPUT"
              exit 0
            fi
            printf -v JSON '["%s"]' "$(IFS='","'; echo "${ALL_NS[*]}")"
            echo "namespaces=${JSON}" >> "$GITHUB_OUTPUT"
            echo "Modules changed -> all namespaces: ${JSON}"
            exit 0
          fi

          # Only namespaces with changes
          mapfile -t NS < <(echo "${CHANGED_FILES}" \
            | grep -E '^namespaces/[^/]+/' || true \
            | awk -F'/' '{print $2}' \
            | sort -u)

          if ((${#NS[@]}==0)); then
            echo "namespaces=[]" >> "$GITHUB_OUTPUT"
            echo "No namespace changes detected."
            exit 0
          fi

          printf -v JSON '["%s"]' "$(IFS='","'; echo "${NS[*]}")"
          echo "namespaces=${JSON}" >> "$GITHUB_OUTPUT"
          echo "Detected namespaces: ${JSON}"

  plan:
    name: Plan (${{ matrix.namespace }})
    needs: detect-changes
    if: needs.detect-changes.outputs.namespaces != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        namespace: ${{ fromJson(needs.detect-changes.outputs.namespaces) }}
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Get Vault Token via OIDC
        id: vault-auth
        shell: bash
        run: |
          set -euo pipefail
          OIDC_JSON="$(curl -sLS -H "Authorization: bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" \
            "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=vault")"
          GITHUB_TOKEN="$(jq -r '.value' <<<"$OIDC_JSON")"
          VAULT_TOKEN="$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d "{\"jwt\": \"${GITHUB_TOKEN}\", \"role\": \"github-actions\"}" \
            "${{ env.VAULT_ADDR }}/v1/auth/jwt/login" | jq -r '.auth.client_token')"
          echo "VAULT_TOKEN=${VAULT_TOKEN}" >> "$GITHUB_ENV"
          echo "::add-mask::${VAULT_TOKEN}"

      - name: Terraform fmt
        working-directory: namespaces/${{ matrix.namespace }}
        run: terraform fmt -check -diff

      - name: Terraform init
        working-directory: namespaces/${{ matrix.namespace }}
        run: terraform init -input=false

      - name: Terraform validate
        working-directory: namespaces/${{ matrix.namespace }}
        run: terraform validate

      - name: Terraform plan
        id: plan
        working-directory: namespaces/${{ matrix.namespace }}
        run: |
          set -e
          terraform plan -input=false -out=tfplan -no-color 2>&1 | tee plan_output.txt
          {
            echo "summary<<EOF"
            grep -E "^[[:space:]]+([#~\-\+])" plan_output.txt || echo "No changes detected"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Upload tfplan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ matrix.namespace }}
          path: |
            namespaces/${{ matrix.namespace }}/tfplan
            namespaces/${{ matrix.namespace }}/plan_output.txt
          if-no-files-found: error
          retention-days: 7

  apply:
    name: Apply (${{ matrix.namespace }})
    needs: plan
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        namespace: ${{ fromJson(needs.detect-changes.outputs.namespaces) }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Get Vault Token via OIDC
        id: vault-auth
        shell: bash
        run: |
          set -euo pipefail
          OIDC_JSON="$(curl -sLS -H "Authorization: bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" \
            "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=vault")"
          GITHUB_TOKEN="$(jq -r '.value' <<<"$OIDC_JSON")"
          VAULT_TOKEN="$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d "{\"jwt\": \"${GITHUB_TOKEN}\", \"role\": \"github-actions\"}" \
            "${{ env.VAULT_ADDR }}/v1/auth/jwt/login" | jq -r '.auth.client_token')"
          echo "VAULT_TOKEN=${VAULT_TOKEN}" >> "$GITHUB_ENV"
          echo "::add-mask::${VAULT_TOKEN}"

      - name: Download tfplan artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ matrix.namespace }}
          path: namespaces/${{ matrix.namespace }}

      - name: Terraform init (ensure providers)
        working-directory: namespaces/${{ matrix.namespace }}
        run: terraform init -input=false

      - name: Terraform apply (using saved plan)
        working-directory: namespaces/${{ matrix.namespace }}
        run: terraform apply -input=false -auto-approve tfplan
