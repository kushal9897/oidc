name: Deploy Infrastructure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Vault OIDC + repo read at the workflow level
permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
  TF_VERSION: "1.6.0"

jobs:
  detect-changes:
    name: Detect Changed Namespaces
    runs-on: ubuntu-latest
    outputs:
      namespaces: ${{ steps.detect.outputs.namespaces }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed namespaces (only under namespaces/)
        id: detect
        shell: bash
        run: |
          set -euo pipefail

          # Find changed files
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE="origin/${{ github.base_ref }}"
            HEAD="HEAD"
            CHANGED_FILES="$(git diff --name-only "${BASE}...${HEAD}")"
          else
            CHANGED_FILES="$(git diff --name-only HEAD~1...HEAD)"
          fi

          # Keep only files under namespaces/, map to the 2nd segment (= namespace), uniq
          mapfile -t NS < <(printf '%s\n' "$CHANGED_FILES" \
            | grep -E '^namespaces/[^/]+/' || true \
            | cut -d'/' -f2 \
            | sort -u)

          if ((${#NS[@]}==0)); then
            echo "namespaces=[]" >> "$GITHUB_OUTPUT"
            echo "No namespace changes detected."
            exit 0
          fi

          # Build compact single-line JSON array like ["qa","backend"]
          JSON=$(printf '%s\n' "${NS[@]}" | jq -RcS '[inputs]')

          # IMPORTANT: write as a single line (no extra whitespace/newlines)
          echo "namespaces=${JSON}" >> "$GITHUB_OUTPUT"
          echo "Detected namespaces: ${JSON}"

  plan:
    name: Plan (${{ matrix.namespace }})
    needs: detect-changes
    if: needs.detect-changes.outputs.namespaces != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        namespace: ${{ fromJson(needs.detect-changes.outputs.namespaces) }}
    defaults:
      run:
        working-directory: namespaces/${{ matrix.namespace }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Get Vault Token via OIDC
        id: vault-auth
        shell: bash
        run: |
          set -euo pipefail
          OIDC_JSON="$(curl -sLS -H "Authorization: bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" \
            "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=vault")"
          GITHUB_TOKEN="$(jq -r '.value' <<<"$OIDC_JSON")"
          VAULT_TOKEN="$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d "{\"jwt\": \"${GITHUB_TOKEN}\", \"role\": \"github-actions\"}" \
            "${{ env.VAULT_ADDR }}/v1/auth/jwt/login" | jq -r '.auth.client_token')"
          echo "VAULT_TOKEN=${VAULT_TOKEN}" >> "$GITHUB_ENV"
          echo "::add-mask::${VAULT_TOKEN}"

      - name: Terraform fmt
        run: terraform fmt -check -diff

      - name: Terraform validate
        run: terraform validate

      - name: Terraform init
        run: terraform init 

      - name: Terraform plan
        run: terraform plan 
