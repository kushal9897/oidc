variables:
  VAULT_ADDR: $VAULT_ADDR
  VAULT_ROLE: "gitlab-actions"
  VAULT_NAMESPACE: "admin"
  VAULT_AUTH_PATH: "auth/gitlab-ci"

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - when: never

stages:
  - detect
  - plan
  - apply

detect-changes:
  stage: detect
  image:
    name: alpine/git:latest
    entrypoint: [""]   
  script:
    - mkdir -p output
    - HAS_CHANGES=false; CHANGED_NS_LIST=","
    - git fetch --no-tags --prune origin "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
    - 'TF_CHANGES_BACKEND=$(git diff --name-only "origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME"...HEAD -- "namespaces/backend" | grep "\.tf$" || true)'
    - 'TF_CHANGES_QA=$(git diff --name-only "origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME"...HEAD -- "namespaces/qa"      | grep "\.tf$" || true)'
    - if [ -n "$TF_CHANGES_BACKEND" ]; then echo "Namespace 'backend' has Terraform changes."; HAS_CHANGES=true; CHANGED_NS_LIST="${CHANGED_NS_LIST}backend,"; else echo "No Terraform changes in 'backend'."; fi
    - if [ -n "$TF_CHANGES_QA" ]; then echo "Namespace 'qa' has Terraform changes."; HAS_CHANGES=true; CHANGED_NS_LIST="${CHANGED_NS_LIST}qa,"; else echo "No Terraform changes in 'qa'."; fi
    - echo "HAS_CHANGES=$HAS_CHANGES" > output/changes.env
    - echo "CHANGED_NS_LIST=$CHANGED_NS_LIST" >> output/changes.env
    - cat output/changes.env
  artifacts:
    reports:
      dotenv: output/changes.env
    expire_in: 1 hour

plan-backend:
  stage: plan
  image:
    name: hashicorp/terraform:1.6.0
    entrypoint: [""]   
  needs: ["detect-changes"]
  variables:
    TF_IN_AUTOMATION: "true"
  script:
    - |
      if ! echo "$CHANGED_NS_LIST" | grep -q ",backend,"; then
    - |
      if ! echo "$CHANGED_NS_LIST" | grep -q ",backend,"; then
        echo "No changes in 'backend'; skipping plan."
        echo "No changes." > backend-plan.txt
        : > backend.tfplan
        exit 0
      fi

    - apk add --no-cache jq curl
    - |
      : "${VAULT_ADDR:?Set VAULT_ADDR (e.g., https://vault.example.com)}"
      : "${VAULT_ROLE:?Set VAULT_ROLE (e.g., gitlab-ci)}"
      VAULT_AUTH_PATH="${VAULT_AUTH_PATH:-auth/gitlab-ci}"
      echo "Logging in to Vault at ${VAULT_AUTH_PATH} as role ${VAULT_ROLE}..."
      VAULT_LOGIN_RESP=$(curl -sS \
        -H "Content-Type: application/json" \
        ${VAULT_NAMESPACE:+-H "X-Vault-Namespace: $VAULT_NAMESPACE"} \
        --data '{"jwt":"'"$CI_JOB_JWT"'","role":"'"$VAULT_ROLE"'"}' \
        "${VAULT_ADDR}/v1/${VAULT_AUTH_PATH}/login")
      export VAULT_TOKEN=$(echo "$VAULT_LOGIN_RESP" | jq -r '.auth.client_token')
      test -n "$VAULT_TOKEN" && [ "$VAULT_TOKEN" != "null" ] || { echo "Vault auth failed: $VAULT_LOGIN_RESP"; exit 1; }
  
    - cd namespaces/backend
    - terraform fmt -check -diff
    - terraform init -input=false
    - terraform validate
    - terraform plan -input=false -out=tfplan
    - terraform show -no-color tfplan > plan.txt
    
    - mv tfplan ../../backend.tfplan
    - mv plan.txt ../../backend-plan.txt
  artifacts:
    paths:
      - backend.tfplan
      - backend-plan.txt
    expire_in: 1 hour

plan-qa:
  stage: plan
  image:
    name: hashicorp/terraform:1.6.0
    entrypoint: [""]   
  needs: ["detect-changes"]
  variables:
    TF_IN_AUTOMATION: "true"
  script:
    - |
      if ! echo "$CHANGED_NS_LIST" | grep -q ",qa,"; then
    - |
      if ! echo "$CHANGED_NS_LIST" | grep -q ",qa,"; then
        echo "No changes in 'qa'; skipping plan."
        echo "No changes." > qa-plan.txt
        : > qa.tfplan
        exit 0
      fi
    - apk add --no-cache jq curl
    - |
      : "${VAULT_ADDR:?Set VAULT_ADDR (e.g., https://vault.example.com)}"
      : "${VAULT_ROLE:?Set VAULT_ROLE (e.g., gitlab-ci)}"
      VAULT_AUTH_PATH="${VAULT_AUTH_PATH:-auth/gitlab-ci}"
      echo "Logging in to Vault at ${VAULT_AUTH_PATH} as role ${VAULT_ROLE}..."
      VAULT_LOGIN_RESP=$(curl -sS \
        -H "Content-Type: application/json" \
        ${VAULT_NAMESPACE:+-H "X-Vault-Namespace: $VAULT_NAMESPACE"} \
        --data '{"jwt":"'"$CI_JOB_JWT"'","role":"'"$VAULT_ROLE"'"}' \
        "${VAULT_ADDR}/v1/${VAULT_AUTH_PATH}/login")
      export VAULT_TOKEN=$(echo "$VAULT_LOGIN_RESP" | jq -r '.auth.client_token')
      test -n "$VAULT_TOKEN" && [ "$VAULT_TOKEN" != "null" ] || { echo "Vault auth failed: $VAULT_LOGIN_RESP"; exit 1; }
  
    - cd namespaces/qa
    - terraform fmt -check -diff
    - terraform init -input=false
    - terraform validate
    - terraform plan -input=false -out=tfplan
    - terraform show -no-color tfplan > plan.txt
   
    - mv tfplan ../../qa.tfplan
    - mv plan.txt ../../qa-plan.txt
  artifacts:
    paths:
      - qa.tfplan
      - qa-plan.txt
    expire_in: 1 hour

apply-backend:
  stage: apply
  image:
    name: hashicorp/terraform:1.6.0
    entrypoint: [""]
  needs:
    - job: detect-changes     
      artifacts: true
    - job: plan-backend       
      artifacts: true
  variables:
    TF_IN_AUTOMATION: "true"
  script:
    - |
      if ! echo "$CHANGED_NS_LIST" | grep -q ",backend,"; then
        echo "No changes in 'backend'; nothing to apply."
        exit 0
      fi
    - apk add --no-cache jq curl
   
    - |
      : "${VAULT_ADDR:?Set VAULT_ADDR (e.g., https://vault.example.com)}"
      : "${VAULT_ROLE:?Set VAULT_ROLE (e.g., gitlab-ci)}"
      VAULT_AUTH_PATH="${VAULT_AUTH_PATH:-auth/gitlab-ci}"
      echo "Logging in to Vault at ${VAULT_AUTH_PATH} as role ${VAULT_ROLE}..."
      VAULT_LOGIN_RESP=$(curl -sS \
        -H "Content-Type: application/json" \
        ${VAULT_NAMESPACE:+-H "X-Vault-Namespace: $VAULT_NAMESPACE"} \
        --data '{"jwt":"'"$CI_JOB_JWT"'","role":"'"$VAULT_ROLE"'"}' \
        "${VAULT_ADDR}/v1/${VAULT_AUTH_PATH}/login")
      export VAULT_TOKEN=$(echo "$VAULT_LOGIN_RESP" | jq -r '.auth.client_token')
      test -n "$VAULT_TOKEN" && [ "$VAULT_TOKEN" != "null" ] || { echo "Vault auth failed: $VAULT_LOGIN_RESP"; exit 1; }
    - terraform apply -input=false -auto-approve backend.tfplan
  when: manual
  allow_failure: false

apply-qa:
  stage: apply
  image:
    name: hashicorp/terraform:1.6.0
    entrypoint: [""]
  needs:
    - job: detect-changes     
      artifacts: true
    - job: plan-qa            
      artifacts: true
  variables:
    TF_IN_AUTOMATION: "true"
  script:
    - |
      if ! echo "$CHANGED_NS_LIST" | grep -q ",qa,"; then
        echo "No changes in 'qa'; nothing to apply."
        exit 0
      fi
    - apk add --no-cache jq curl
    - |
      : "${VAULT_ADDR:?Set VAULT_ADDR (e.g., https://vault.example.com)}"
      : "${VAULT_ROLE:?Set VAULT_ROLE (e.g., gitlab-ci)}"
      VAULT_AUTH_PATH="${VAULT_AUTH_PATH:-auth/gitlab-ci}"
      echo "Logging in to Vault at ${VAULT_AUTH_PATH} as role ${VAULT_ROLE}..."
      VAULT_LOGIN_RESP=$(curl -sS \
        -H "Content-Type: application/json" \
        ${VAULT_NAMESPACE:+-H "X-Vault-Namespace: $VAULT_NAMESPACE"} \
        --data '{"jwt":"'"$CI_JOB_JWT"'","role":"'"$VAULT_ROLE"'"}' \
        "${VAULT_ADDR}/v1/${VAULT_AUTH_PATH}/login")
      export VAULT_TOKEN=$(echo "$VAULT_LOGIN_RESP" | jq -r '.auth.client_token')
      test -n "$VAULT_TOKEN" && [ "$VAULT_TOKEN" != "null" ] || { echo "Vault auth failed: $VAULT_LOGIN_RESP"; exit 1; }
    - terraform apply -input=false -auto-approve qa.tfplan
  when: manual
  allow_failure: false
